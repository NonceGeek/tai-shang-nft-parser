# defmodule TaiShangNftParser.User do
#   use Ecto.Schema
#   import Ecto.Changeset
#   alias Comeonin.Bcrypt
#   alias TaiShangNftParser.User, as: Ele
#   alias TaiShangNftParser.Repo

#   schema "user" do
#     field :encrypted_password, :string
#     field :username, :string
#     filed :group, :integer, default: 0
#     timestamps()
#   end

#   def get_by_user_name(username) when is_nil(username) do
#     nil
#   end

#   def get_by_user_name(username) do
#     Repo.get_by(Ele, username: username)
#   end

#   def get_by_user_id(id) do
#     Repo.get_by(Ele, id: id)
#   end

#   def create(attrs \\ %{}) do
#     %Ele{}
#     |> Ele.changeset(attrs)
#     |> Repo.insert()
#   end

#   def change(%Ele{} = ele, attrs) do
#     ele
#     |> changeset(attrs)
#     |> Repo.update()
#   end

#   def changeset(%Ele{} = ele) do
#     Ele.changeset(ele, %{})
#   end

#   @doc false
#   def changeset(%Ele{} = user, attrs) do
#     user
#     |> cast(attrs, [:username, :encrypted_password])
#     |> unique_constraint(:username)
#     |> validate_required([:username, :encrypted_password])
#     |> update_change(:encrypted_password, &Bcrypt.hashpwsalt/1)
#   end
# end
